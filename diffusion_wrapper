#!/bin/bash
#
# ./diffusion_wrapper
# 

Usage() {
    echo ""
    echo "Usage: `basename $0` [options] --sub=<sub-##> --ses=<session tag> --inDir=<directory of sub> --step=<step>"
    echo " "
    echo "Possible step options: all, preproc, metrics, fod, fiveTTP, tract, tract_measures, move_outputs"
    echo " "
    echo "Optional arguments"
    echo "  --nStreamline=<val>    : number of tractography streamlines to find (default: 20M)"
    echo "  --nSift=<val>          : number of tractography streamlines to keep (default: 5M)"
    echo "  --nthreads=<val>       : number of threads to use (default 4)"
    echo "  --use_topup            : use topup(s)"
    echo "  --overwrite            : overwrite any previous steps"
    echo "  --pedir=<dir>          : phase encoding direction of dwi: can be signed axis number (e.g. -0,1,+2), an axis designator (e.g. RL,PA,IS), or NIFTI axis codes (e.g. i-,j,k)"
    echo "  --use_upsample         : upsample the outputs to an isotropic resolution"
    echo "  --voxelsize=<val>      : isotropic resolution (mm) to upsample outputs to"
    echo "  -h                     : display this help message"
    echo " "
    echo "e.g.:  `basename $0` --sub=sub-137 --ses=001 --inDir=/media/sf_VMshared/diffusion --step=all --use_upsample --voxelsize=1.25 --use_topup --pedir=j"
    echo " "
    exit 1
}


get_opt1() {
    arg=`echo $1 | sed 's/=.*//'`
    echo $arg
}


get_arg1() {
    if [ X`echo $1 | grep '='` = X ] ; then 
	echo "Option $1 requires an argument" 1>&2
	exit 1
    else 
	arg=`echo $1 | sed 's/.*=//'`
	if [ X$arg = X ] ; then
	    echo "Option $1 requires an argument" 1>&2
	    exit 1
	fi
	echo $arg
    fi
}




# list of variables to be set via the options
step="";
sub="";
ses="";
inDir="";
topupFlag=no;
pedir=none;
upsampleFlag=no;
voxel=none;
streamline="20M";
sift="5M";
threads=4;
overwrite=no;


if [ $# -lt 4 ] ; then Usage; exit 0; fi
while [ $# -ge 1 ] ; do
    iarg=`get_opt1 $1`;
    case "$iarg"
	in
	--sub)
	    sub=`get_arg1 $1`;
	    shift;;
	--ses)
	    ses=`get_arg1 $1`;
	    shift;;
	--inDir)
	    inDir=`get_arg1 $1`;
	    shift;;
	--step)
	    step=`get_arg1 $1`;
	    shift;;
	--use_topup)
	    topupFlag=yes; 
	    shift;;
	--pedir)
	    pedir=`get_arg1 $1`;
	    shift;;
	--use_upsample)
	    upsampleFlag=yes;
	    shift;;
	--overwrite)
	    overwrite=yes;
	    shift;;
	--voxelsize)
	    voxel=`get_arg1 $1`;
	    shift;;
	--nStreamline)
	    streamline=`get_arg1 $1`;
	    shift;;
	--nSift)
	    sift=`get_arg1 $1`;
	    shift;;
	--nthreads)
	    threads=`get_arg1 $1`; 
	    shift;;
	-h)
	    Usage;
	    exit 0;;
	*)
	    #if [ `echo $1 | sed 's/^\(.\).*/\1/'` = "-" ] ; then 
	    echo "Unrecognised option $1" 1>&2
	    exit 1
	    #fi
	    #shift;;
    esac
done




codedir=$(pwd)
######################################################

if [ X$sub = X ] ; then
  echo "The compulsory argument --sub MUST be used"
  exit 1;
fi

if [ X$ses = X ] ; then
  echo "The compulsory argument --ses MUST be used"
  exit 1;
fi

if [ X$inDir = X ] ; then
  echo "The compulsory argument --inDir MUST be used"
  exit 1;
fi

if [ X$step = X ] ; then
  echo "The compulsory argument --step MUST be used"
  exit 1;
fi


if [ $upsampleFlag = yes ] ; then
    if [ $voxel = none ] ; then
	echo "The argument --voxelsize MUST be specified if upsampling"
	exit 1;
    fi
fi

if [ $topupFlag = yes ] ; then
    if [ $pedir = none ] ; then
	echo "The argument --pedir MUST be specified if using topups"
	exit 1;
    fi
fi


run_preproc=no
run_metrics=no
run_fod=no
run_5TTP=no
run_tract=no
run_tractMeas=no
run_move=no


if [ ${step} = all ]; then
	run_preproc=yes
	run_metrics=yes
	run_fod=yes
	run_5TTP=yes
	run_tract=yes
	run_tractMeas=yes
	run_move=yes
elif [ ${step} = preproc ]; then run_preproc=yes;
elif [ ${step} = metrics ]; then run_metrics=yes; 
elif [ ${step} = fod ]; then run_fod=yes;
elif [ ${step} = fiveTTP ]; then run_5TTP=yes;
elif [ ${step} = tract ]; then run_tract=yes;
elif [ ${step} = tract_measures ]; then run_tractMeas=yes;
elif [ ${step} = move_outputs ]; then run_move=yes;
else echo "${step} not valid step"; exit 1; 
fi

echo "Arguments are:"
echo "  sub = $sub"
echo "  ses = $ses"
echo "  inDir = $inDir"
echo "  step = $step"
echo "  topup = $topupFlag"
echo "  direction = $pedir"
echo "  overwrite = $overwrite"
echo "  upsample = $upsampleFlag"
echo "  voxelSize = $voxel"
echo "  streamline = $streamline"
echo "  sift = $sift"
echo "  threads = $threads"
echo "------------------------------------------------------------------"

######################################################

source ${codedir}/make_diff_names ${sub} ${inDir} ${ses} ${streamline} ${sift} ${threads} ${pedir} ${topupFlag} ${upsampleFlag} ${voxel}


###
if [ ${upsampleFlag} = yes ]; then
	tempPreproc=${dwi_preproc_BC_up}.nii.gz
else
	tempPreproc=${dwi_preproc_BC}.nii.gz
fi



#### PREPRCOESSING
if [ ${run_preproc} = yes ]; then

	# make the preproc directory if it doesn't exist
	if [ ! -d "${preprocDir}" ]; then mkdir "${preprocDir}"; fi

	# runs preprocessing if: a final preprocessed output doesn't exist, OR if overwrite flag is high
	if [ ! -e "${tempPreproc}" ] || [ ${overwrite} = yes ]; then
		echo "RUNNING DIFFUSION PREPROCESSING AT $(date)..."
		time ${codedir}/diffusion_preproc ${sub} ${inDir} ${ses} ${streamline} ${sift} ${threads} ${pedir} ${topupFlag} ${upsampleFlag} ${voxel} ${codedir}
	else echo "PREPROCESSING ALREADY COMPLETED... SKIPPING STEP"
	fi
fi


#### METRICS
if [ ${run_metrics} = yes ]; then

	# make a metrics directory if it doesn't exist
	if [ ! -d "${metricDir}" ]; then mkdir "${metricDir}"; fi

	echo ""
	if [ ! -e "${dtifitRD}.mif" ] || [ ${overwrite} = yes ]; then
		echo "RUNNING DIFFUSION METRICS AT $(date)..."
		time ${codedir}/diffusion_metrics ${sub} ${inDir} ${ses} ${streamline} ${sift} ${threads} ${pedir} ${topupFlag} ${upsampleFlag} ${voxel} ${codedir}
	else echo "DIFFUSION METRICS ALREADY COMPLETED... SKIPPING STEP"
	fi
fi

#### FIBRE ORIENTATION DISTRIBUTIONS
if [ ${run_fod} = yes ]; then

	if [ ! -d "${FODdir}" ]; then mkdir "${FODdir}"; fi
	echo ""
	if [ ! -e "${csfODF_norm}.mif" ] || [ ${overwrite} = yes ]; then
		echo "RUNNING FOD AT $(date)..."
		time ${codedir}/diffusion_fod ${sub} ${inDir} ${ses} ${streamline} ${sift} ${threads} ${pedir} ${topupFlag} ${upsampleFlag} ${voxel} ${codedir}
	else echo "FOD GENERATION ALREADY COMPLETED... SKIPPING STEP"
	fi
fi

#### REGISTRATION OF 5TTP, PROCESSED T2, AND SEGMENTATION
if [ ${run_5TTP} = yes ]; then

	if [ ! -d "${regDir}" ]; then mkdir "${regDir}"; fi
	echo ""
	if [ ! -e "${nodes_aparca2009s}.mif" ] || [ ${overwrite} = yes ]; then
		echo "RUNNING 5TT and NODE GENERATION AT $(date)..."
		time ${codedir}/diffusion_5TT_nodes ${sub} ${inDir} ${ses} ${streamline} ${sift} ${threads} ${pedir} ${topupFlag} ${upsampleFlag} ${voxel} ${codedir}
	else echo "REGISTRATION OF SEGMENTATION ALREADY COMPLETED... SKIPPING STEP"
	fi
fi

#### TRACTOGRAPHY
if [ ${run_tract} = yes ]; then

	if [ ! -d "${tractDir}" ]; then mkdir "${tractDir}"; fi
	echo ""
	if [ ! -e "${sifttrack}.tck" ] || [ ${overwrite} = yes ]; then
		echo "RUNNING TRACTOGRAPHY AT $(date)..."
		time ${codedir}/diffusion_tractography ${sub} ${inDir} ${ses} ${streamline} ${sift} ${threads} ${pedir} ${topupFlag} ${upsampleFlag} ${voxel} ${codedir}
	else echo "TRACTOGRAPHY ALREADY COMPLETED... SKIPPING STEP"
	fi
fi

#### TRACTOGRAPHY MEASURES
if [ ${run_tractMeas} = yes ]; then
	echo ""
	if [ ! -e "${connectomeRD}" ] || [ ${overwrite} = yes ]; then
		echo "RUNNING TRACTOGRAPHY MEASURES AT $(date)..."
		time ${codedir}/diffusion_tract_measures ${sub} ${inDir} ${ses} ${streamline} ${sift} ${threads} ${pedir} ${topupFlag} ${upsampleFlag} ${voxel} ${codedir}
	else echo "TRACTOGRAPHY MEASURES ALREADY COMPLETED... SKIPPING STEP"
	fi
fi


#### MOVE FINAL OUTPUTS TO TOP LEVEL FOLDER
if [ ${run_move} = yes ]; then
	echo ""
	if [ ! -e "${diffDir}/${sub}_ses-${ses}_RD.nii.gz" ] || [ ${overwrite} = yes ]; then
		echo "MOVING OUTPUTS AT $(date)..."
		time ${codedir}/diffusion_move_outputs ${sub} ${inDir} ${ses} ${streamline} ${sift} ${threads} ${pedir} ${topupFlag} ${upsampleFlag} ${voxel} ${codedir}
	else echo "OUTPUTS ALREADY MOVED"
	fi
fi


echo "------------------------------------------------------------------"

